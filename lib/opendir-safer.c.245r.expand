
;; Function opendir_safer (opendir_safer, funcdef_no=6, decl_uid=2320, cgraph_uid=7, symbol_order=6)

Partition 1: size 8 align 8
	newdp_5
Partition 0: size 8 align 8
	dp_4
Partition 4: size 4 align 4
	f_16
Partition 3: size 4 align 4
	fd_14
Partition 2: size 4 align 4
	e_6

;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; Generating RTL for gimple basic block 5

;; Generating RTL for gimple basic block 6

;; Generating RTL for gimple basic block 7

;; Generating RTL for gimple basic block 8

;; Generating RTL for gimple basic block 9

;; Generating RTL for gimple basic block 10

;; Generating RTL for gimple basic block 11


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 12 into block 11...
Merged blocks 11 and 12.
Merged 11 and 12 without moving.
Removing jump 83.
Merging block 13 into block 11...
Merged blocks 11 and 13.
Merged 11 and 13 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [3 name+0 S8 A64])
        (reg:DI 5 di [ name ])) "opendir-safer.c":32:1 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -40 [0xffffffffffffffd8])) [3 name+0 S8 A64])) "opendir-safer.c":33:13 -1
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 87)) "opendir-safer.c":33:13 -1
     (nil))
(call_insn 8 7 9 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("opendir") [flags 0x41]  <function_decl 0x7f1723974a00 opendir>) [0 opendir S1 A8])
            (const_int 0 [0]))) "opendir-safer.c":33:13 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 9 8 10 2 (set (reg:DI 88)
        (reg:DI 0 ax)) "opendir-safer.c":33:13 -1
     (nil))
(insn 10 9 11 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [1 dp+0 S8 A64])
        (reg:DI 88)) "opendir-safer.c":33:13 -1
     (nil))
(insn 11 10 12 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -16 [0xfffffffffffffff0])) [1 dp+0 S8 A64])
            (const_int 0 [0]))) "opendir-safer.c":35:6 -1
     (nil))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) "opendir-safer.c":35:6 -1
     (nil)
 -> 77)
(note 13 12 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 4 (set (reg:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [1 dp+0 S8 A64])) "opendir-safer.c":37:16 -1
     (nil))
(insn 15 14 16 4 (set (reg:DI 5 di)
        (reg:DI 89)) "opendir-safer.c":37:16 -1
     (nil))
(call_insn 16 15 17 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("dirfd") [flags 0x41]  <function_decl 0x7f1723988400 dirfd>) [0 dirfd S1 A8])
            (const_int 0 [0]))) "opendir-safer.c":37:16 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 17 16 18 4 (set (reg:SI 90)
        (reg:SI 0 ax)) "opendir-safer.c":37:16 -1
     (nil))
(insn 18 17 21 4 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 fd+0 S4 A64])
        (reg:SI 90)) "opendir-safer.c":37:16 -1
     (nil))
(insn 21 18 22 4 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])) [2 fd+0 S4 A64])
            (const_int 0 [0]))) "opendir-safer.c":39:10 -1
     (nil))
(jump_insn 22 21 23 4 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) "opendir-safer.c":39:10 -1
     (nil)
 -> 77)
(note 23 22 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 23 27 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])) [2 fd+0 S4 A64])
            (const_int 2 [0x2]))) "opendir-safer.c":39:19 -1
     (nil))
(jump_insn 27 26 28 5 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) "opendir-safer.c":39:19 -1
     (nil)
 -> 77)
(note 28 27 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 6 (set (reg:SI 91)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [2 fd+0 S4 A64])) "opendir-safer.c":52:19 -1
     (nil))
(insn 30 29 31 6 (set (reg:SI 1 dx)
        (const_int 3 [0x3])) "opendir-safer.c":52:19 -1
     (nil))
(insn 31 30 32 6 (set (reg:SI 4 si)
        (const_int 1030 [0x406])) "opendir-safer.c":52:19 -1
     (nil))
(insn 32 31 33 6 (set (reg:SI 5 di)
        (reg:SI 91)) "opendir-safer.c":52:19 -1
     (nil))
(insn 33 32 34 6 (set (reg:QI 0 ax)
        (const_int 0 [0])) "opendir-safer.c":52:19 -1
     (nil))
(call_insn 34 33 35 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rpl_fcntl") [flags 0x41]  <function_decl 0x7f17239cd700 rpl_fcntl>) [0 rpl_fcntl S1 A8])
            (const_int 0 [0]))) "opendir-safer.c":52:19 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 35 34 36 6 (set (reg:SI 92)
        (reg:SI 0 ax)) "opendir-safer.c":52:19 -1
     (nil))
(insn 36 35 39 6 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [2 f+0 S4 A32])
        (reg:SI 92)) "opendir-safer.c":52:19 -1
     (nil))
(insn 39 36 40 6 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -20 [0xffffffffffffffec])) [2 f+0 S4 A32])
            (const_int 0 [0]))) "opendir-safer.c":53:14 -1
     (nil))
(jump_insn 40 39 41 6 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 49)
            (pc))) "opendir-safer.c":53:14 -1
     (nil)
 -> 49)
(note 41 40 42 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(call_insn/u 42 41 43 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f17239a1b00 __errno_location>) [0 __errno_location S1 A8])
            (const_int 0 [0]))) "opendir-safer.c":55:19 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 43 42 44 7 (set (reg/f:DI 82 [ _1 ])
        (reg:DI 0 ax)) "opendir-safer.c":55:19 -1
     (nil))
(insn 44 43 45 7 (set (reg:SI 93)
        (mem:SI (reg/f:DI 82 [ _1 ]) [2 *_1+0 S4 A32])) "opendir-safer.c":55:17 -1
     (nil))
(insn 45 44 46 7 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [2 e+0 S4 A32])
        (reg:SI 93)) "opendir-safer.c":55:17 -1
     (nil))
(insn 46 45 47 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 newdp+0 S8 A64])
        (const_int 0 [0])) "opendir-safer.c":56:21 -1
     (nil))
(jump_insn 47 46 48 7 (set (pc)
        (label_ref 66)) -1
     (nil)
 -> 66)
(barrier 48 47 49)
(code_label 49 48 50 8 3 (nil) [1 uses])
(note 50 49 51 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 8 (set (reg:SI 94)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [2 f+0 S4 A32])) "opendir-safer.c":60:23 -1
     (nil))
(insn 52 51 53 8 (set (reg:SI 5 di)
        (reg:SI 94)) "opendir-safer.c":60:23 -1
     (nil))
(call_insn 53 52 54 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rpl_fdopendir") [flags 0x41]  <function_decl 0x7f17239a1800 rpl_fdopendir>) [0 rpl_fdopendir S1 A8])
            (const_int 0 [0]))) "opendir-safer.c":60:23 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 54 53 55 8 (set (reg:DI 95)
        (reg:DI 0 ax)) "opendir-safer.c":60:23 -1
     (nil))
(insn 55 54 56 8 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 newdp+0 S8 A64])
        (reg:DI 95)) "opendir-safer.c":60:23 -1
     (nil))
(call_insn/u 56 55 57 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f17239a1b00 __errno_location>) [0 __errno_location S1 A8])
            (const_int 0 [0]))) "opendir-safer.c":61:19 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 57 56 58 8 (set (reg/f:DI 83 [ _2 ])
        (reg:DI 0 ax)) "opendir-safer.c":61:19 -1
     (nil))
(insn 58 57 59 8 (set (reg:SI 96)
        (mem:SI (reg/f:DI 83 [ _2 ]) [2 *_2+0 S4 A32])) "opendir-safer.c":61:17 -1
     (nil))
(insn 59 58 60 8 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [2 e+0 S4 A32])
        (reg:SI 96)) "opendir-safer.c":61:17 -1
     (nil))
(insn 60 59 61 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 newdp+0 S8 A64])
            (const_int 0 [0]))) "opendir-safer.c":62:18 -1
     (nil))
(jump_insn 61 60 62 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 66)
            (pc))) "opendir-safer.c":62:18 -1
     (nil)
 -> 66)
(note 62 61 63 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 9 (set (reg:SI 97)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [2 f+0 S4 A32])) "opendir-safer.c":63:17 -1
     (nil))
(insn 64 63 65 9 (set (reg:SI 5 di)
        (reg:SI 97)) "opendir-safer.c":63:17 -1
     (nil))
(call_insn 65 64 66 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("close") [flags 0x41]  <function_decl 0x7f17239dc200 close>) [0 close S1 A8])
            (const_int 0 [0]))) "opendir-safer.c":63:17 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(code_label 66 65 67 10 4 (nil) [2 uses])
(note 67 66 68 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 10 (set (reg:DI 98)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [1 dp+0 S8 A64])) "opendir-safer.c":69:11 -1
     (nil))
(insn 69 68 70 10 (set (reg:DI 5 di)
        (reg:DI 98)) "opendir-safer.c":69:11 -1
     (nil))
(call_insn 70 69 71 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("closedir") [flags 0x41]  <function_decl 0x7f1723974c00 closedir>) [0 closedir S1 A8])
            (const_int 0 [0]))) "opendir-safer.c":69:11 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(call_insn/u 71 70 72 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__errno_location") [flags 0x41]  <function_decl 0x7f17239a1b00 __errno_location>) [0 __errno_location S1 A8])
            (const_int 0 [0]))) "opendir-safer.c":70:11 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 72 71 73 10 (set (reg/f:DI 84 [ _3 ])
        (reg:DI 0 ax)) "opendir-safer.c":70:11 -1
     (nil))
(insn 73 72 74 10 (set (reg:SI 99)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [2 e+0 S4 A32])) "opendir-safer.c":70:17 -1
     (nil))
(insn 74 73 75 10 (set (mem:SI (reg/f:DI 84 [ _3 ]) [2 *_3+0 S4 A32])
        (reg:SI 99)) "opendir-safer.c":70:17 -1
     (nil))
(insn 75 74 76 10 (set (reg/f:DI 100)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 newdp+0 S8 A64])) "opendir-safer.c":71:14 -1
     (nil))
(insn 76 75 77 10 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [1 dp+0 S8 A64])
        (reg/f:DI 100)) "opendir-safer.c":71:14 -1
     (nil))
(code_label 77 76 78 11 2 (nil) [3 uses])
(note 78 77 79 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 82 11 (set (reg/f:DI 85 [ _26 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [1 dp+0 S8 A64])) "opendir-safer.c":75:10 -1
     (nil))
(insn 82 79 86 11 (set (reg/f:DI 86 [ <retval> ])
        (reg/f:DI 85 [ _26 ])) "opendir-safer.c":75:10 -1
     (nil))
(insn 86 82 87 11 (set (reg/i:DI 0 ax)
        (reg/f:DI 86 [ <retval> ])) "opendir-safer.c":76:1 -1
     (nil))
(insn 87 86 0 11 (use (reg/i:DI 0 ax)) "opendir-safer.c":76:1 -1
     (nil))
