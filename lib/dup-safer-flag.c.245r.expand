
;; Function dup_safer_flag (dup_safer_flag, funcdef_no=6, decl_uid=1950, cgraph_uid=7, symbol_order=6)


;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; Generating RTL for gimple basic block 5

;; Generating RTL for gimple basic block 6


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 7 into block 6...
Merged blocks 6 and 7.
Merged 6 and 7 without moving.
Removing jump 30.
Merging block 8 into block 6...
Merged blocks 6 and 8.
Merged 6 and 8 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 fd+0 S4 A32])
        (reg:SI 5 di [ fd ])) "dup-safer-flag.c":35:1 -1
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 flag+0 S4 A32])
        (reg:SI 4 si [ flag ])) "dup-safer-flag.c":35:1 -1
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 86)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 flag+0 S4 A32])) "dup-safer-flag.c":36:27 -1
     (nil))
(insn 8 7 9 2 (parallel [
            (set (reg:SI 82 [ _1 ])
                (and:SI (reg:SI 86)
                    (const_int 524288 [0x80000])))
            (clobber (reg:CC 17 flags))
        ]) "dup-safer-flag.c":36:27 -1
     (expr_list:REG_EQUAL (and:SI (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 flag+0 S4 A32])
            (const_int 524288 [0x80000]))
        (nil)))
(insn 9 8 10 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 82 [ _1 ])
            (const_int 0 [0]))) "dup-safer-flag.c":36:10 -1
     (nil))
(jump_insn 10 9 11 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 15)
            (pc))) "dup-safer-flag.c":36:10 -1
     (nil)
 -> 15)
(note 11 10 12 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 4 (set (reg:SI 83 [ iftmp.0_2 ])
        (const_int 1030 [0x406])) "dup-safer-flag.c":36:10 -1
     (nil))
(jump_insn 13 12 14 4 (set (pc)
        (label_ref 18)) -1
     (nil)
 -> 18)
(barrier 14 13 15)
(code_label 15 14 16 5 2 (nil) [1 uses])
(note 16 15 17 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 5 (set (reg:SI 83 [ iftmp.0_2 ])
        (const_int 0 [0])) "dup-safer-flag.c":36:10 -1
     (nil))
(code_label 18 17 19 6 3 (nil) [1 uses])
(note 19 18 20 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 6 (set (reg:SI 87)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 fd+0 S4 A32])) "dup-safer-flag.c":36:10 -1
     (nil))
(insn 21 20 22 6 (set (reg:SI 1 dx)
        (const_int 3 [0x3])) "dup-safer-flag.c":36:10 -1
     (nil))
(insn 22 21 23 6 (set (reg:SI 4 si)
        (reg:SI 83 [ iftmp.0_2 ])) "dup-safer-flag.c":36:10 -1
     (nil))
(insn 23 22 24 6 (set (reg:SI 5 di)
        (reg:SI 87)) "dup-safer-flag.c":36:10 -1
     (nil))
(insn 24 23 25 6 (set (reg:QI 0 ax)
        (const_int 0 [0])) "dup-safer-flag.c":36:10 -1
     (nil))
(call_insn 25 24 26 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rpl_fcntl") [flags 0x41]  <function_decl 0x76de8c5bc000 rpl_fcntl>) [0 rpl_fcntl S1 A8])
            (const_int 0 [0]))) "dup-safer-flag.c":36:10 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 26 25 29 6 (set (reg:SI 84 [ _9 ])
        (reg:SI 0 ax)) "dup-safer-flag.c":36:10 -1
     (nil))
(insn 29 26 33 6 (set (reg:SI 85 [ <retval> ])
        (reg:SI 84 [ _9 ])) "dup-safer-flag.c":36:10 -1
     (nil))
(insn 33 29 34 6 (set (reg/i:SI 0 ax)
        (reg:SI 85 [ <retval> ])) "dup-safer-flag.c":38:1 -1
     (nil))
(insn 34 33 0 6 (use (reg/i:SI 0 ax)) "dup-safer-flag.c":38:1 -1
     (nil))
