
;; Function open_safer (open_safer, funcdef_no=6, decl_uid=2196, cgraph_uid=7, symbol_order=6)

Partition 1: size 24 align 8
	ap
Partition 0: size 4 align 4
	mode_3

;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; Generating RTL for gimple basic block 4

;; Generating RTL for gimple basic block 5

;; Generating RTL for gimple basic block 6

;; Generating RTL for gimple basic block 7

;; Generating RTL for gimple basic block 8


try_optimize_cfg iteration 1

Merging block 5 into block 4...
Merged blocks 4 and 5.
Merged 4 and 5 without moving.
Merging block 11 into block 10...
Merged blocks 10 and 11.
Merged 10 and 11 without moving.
Removing jump 75.
Merging block 12 into block 10...
Merged blocks 10 and 12.
Merged 10 and 12 without moving.


try_optimize_cfg iteration 2



;;
;; Full RTL generated for this function:
;;
(note 1 0 21 NOTE_INSN_DELETED)
(note 21 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 21 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -56 [0xffffffffffffffc8])) [4 file+0 S8 A64])
        (reg:DI 5 di [ file ])) "open-safer.c":30:1 -1
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -60 [0xffffffffffffffc4])) [2 flags+0 S4 A32])
        (reg:SI 4 si [ flags ])) "open-safer.c":30:1 -1
     (nil))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int 16 [0x10])) [0  S8 A8])
        (reg:DI 1 dx)) "open-safer.c":30:1 -1
     (nil))
(insn 5 4 6 2 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int 24 [0x18])) [0  S8 A8])
        (reg:DI 2 cx)) "open-safer.c":30:1 -1
     (nil))
(insn 6 5 7 2 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int 32 [0x20])) [0  S8 A8])
        (reg:DI 36 r8)) "open-safer.c":30:1 -1
     (nil))
(insn 7 6 8 2 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int 40 [0x28])) [0  S8 A8])
        (reg:DI 37 r9)) "open-safer.c":30:1 -1
     (nil))
(insn 8 7 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax)
            (const_int 0 [0]))) "open-safer.c":30:1 -1
     (nil))
(jump_insn 9 8 86 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) "open-safer.c":30:1 -1
     (nil)
 -> 18)
(note 86 9 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 86 11 3 (set (mem/c:V4SF (plus:DI (reg/f:DI 19 frame)
                (const_int 48 [0x30])) [0  S16 A128])
        (reg:V4SF 20 xmm0)) "open-safer.c":30:1 -1
     (nil))
(insn 11 10 12 3 (set (mem/c:V4SF (plus:DI (reg/f:DI 19 frame)
                (const_int 64 [0x40])) [0  S16 A128])
        (reg:V4SF 21 xmm1)) "open-safer.c":30:1 -1
     (nil))
(insn 12 11 13 3 (set (mem/c:V4SF (plus:DI (reg/f:DI 19 frame)
                (const_int 80 [0x50])) [0  S16 A128])
        (reg:V4SF 22 xmm2)) "open-safer.c":30:1 -1
     (nil))
(insn 13 12 14 3 (set (mem/c:V4SF (plus:DI (reg/f:DI 19 frame)
                (const_int 96 [0x60])) [0  S16 A128])
        (reg:V4SF 23 xmm3)) "open-safer.c":30:1 -1
     (nil))
(insn 14 13 15 3 (set (mem/c:V4SF (plus:DI (reg/f:DI 19 frame)
                (const_int 112 [0x70])) [0  S16 A128])
        (reg:V4SF 24 xmm4)) "open-safer.c":30:1 -1
     (nil))
(insn 15 14 16 3 (set (mem/c:V4SF (plus:DI (reg/f:DI 19 frame)
                (const_int 128 [0x80])) [0  S16 A128])
        (reg:V4SF 25 xmm5)) "open-safer.c":30:1 -1
     (nil))
(insn 16 15 17 3 (set (mem/c:V4SF (plus:DI (reg/f:DI 19 frame)
                (const_int 144 [0x90])) [0  S16 A128])
        (reg:V4SF 26 xmm6)) "open-safer.c":30:1 -1
     (nil))
(insn 17 16 18 3 (set (mem/c:V4SF (plus:DI (reg/f:DI 19 frame)
                (const_int 160 [0xa0])) [0  S16 A128])
        (reg:V4SF 27 xmm7)) "open-safer.c":30:1 -1
     (nil))
(code_label 18 17 87 4 2 (nil) [1 uses])
(note 87 18 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(note 19 87 20 4 NOTE_INSN_FUNCTION_BEG)
(insn 20 19 23 4 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                        (const_int -8 [0xfffffffffffffff8])) [3 D.2412+0 S8 A64])
                (unspec:DI [
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_SET))
            (set (scratch:DI)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "open-safer.c":30:1 -1
     (nil))
(insn 23 20 24 4 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [2 mode+0 S4 A32])
        (const_int 0 [0])) "open-safer.c":31:10 -1
     (nil))
(insn 24 23 25 4 (set (reg:SI 94)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -60 [0xffffffffffffffc4])) [2 flags+0 S4 A32])) "open-safer.c":33:13 -1
     (nil))
(insn 25 24 26 4 (parallel [
            (set (reg:SI 82 [ _1 ])
                (and:SI (reg:SI 94)
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ]) "open-safer.c":33:13 -1
     (expr_list:REG_EQUAL (and:SI (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                    (const_int -60 [0xffffffffffffffc4])) [2 flags+0 S4 A32])
            (const_int 64 [0x40]))
        (nil)))
(insn 26 25 27 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 82 [ _1 ])
            (const_int 0 [0]))) "open-safer.c":33:6 -1
     (nil))
(jump_insn 27 26 28 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 58)
            (pc))) "open-safer.c":33:6 -1
     (nil)
 -> 58)
(note 28 27 29 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 6 (parallel [
            (set (reg:DI 95)
                (plus:DI (reg/f:DI 76 virtual-incoming-args)
                    (const_int 0 [0])))
            (clobber (reg:CC 17 flags))
        ]) "open-safer.c":36:7 -1
     (nil))
(insn 30 29 31 6 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [0 MEM[(struct [1] *)&ap].gp_offset+0 S4 A64])
        (const_int 16 [0x10])) "open-safer.c":36:7 -1
     (nil))
(insn 31 30 32 6 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [0 MEM[(struct [1] *)&ap].fp_offset+0 S4 A32])
        (const_int 48 [0x30])) "open-safer.c":36:7 -1
     (nil))
(insn 32 31 33 6 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [0 MEM[(struct [1] *)&ap].overflow_arg_area+0 S8 A64])
        (reg/f:DI 76 virtual-incoming-args)) "open-safer.c":36:7 -1
     (nil))
(insn 33 32 34 6 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [0 MEM[(struct [1] *)&ap].reg_save_area+0 S8 A64])
        (reg/f:DI 19 frame)) "open-safer.c":36:7 -1
     (nil))
(insn 34 33 37 6 (set (reg:SI 86 [ D.2403 ])
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [2 MEM[(struct  *)&ap].gp_offset+0 S4 A64])) "open-safer.c":40:12 -1
     (nil))
(insn 37 34 38 6 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 86 [ D.2403 ])
            (const_int 47 [0x2f]))) "open-safer.c":40:12 -1
     (nil))
(jump_insn 38 37 39 6 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 49)
            (pc))) "open-safer.c":40:12 -1
     (nil)
 -> 49)
(note 39 38 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 7 (set (reg/f:DI 87 [ D.2405 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 MEM[(struct  *)&ap].reg_save_area+0 S8 A64])) "open-safer.c":40:12 -1
     (nil))
(insn 41 40 42 7 (set (reg:SI 88 [ D.2406 ])
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [2 MEM[(struct  *)&ap].gp_offset+0 S4 A64])) "open-safer.c":40:12 -1
     (nil))
(insn 42 41 43 7 (set (reg:DI 89 [ D.2407 ])
        (zero_extend:DI (reg:SI 88 [ D.2406 ]))) "open-safer.c":40:12 -1
     (nil))
(insn 43 42 44 7 (parallel [
            (set (reg/f:DI 85 [ D.2410 ])
                (plus:DI (reg/f:DI 87 [ D.2405 ])
                    (reg:DI 89 [ D.2407 ])))
            (clobber (reg:CC 17 flags))
        ]) "open-safer.c":40:12 -1
     (nil))
(insn 44 43 45 7 (set (reg:SI 90 [ D.2408 ])
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [2 MEM[(struct  *)&ap].gp_offset+0 S4 A64])) "open-safer.c":40:12 -1
     (nil))
(insn 45 44 46 7 (parallel [
            (set (reg:SI 91 [ D.2409 ])
                (plus:SI (reg:SI 90 [ D.2408 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "open-safer.c":40:12 -1
     (nil))
(insn 46 45 47 7 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [2 MEM[(struct  *)&ap].gp_offset+0 S4 A64])
        (reg:SI 91 [ D.2409 ])) "open-safer.c":40:12 -1
     (nil))
(jump_insn 47 46 48 7 (set (pc)
        (label_ref 54)) "open-safer.c":40:12 -1
     (nil)
 -> 54)
(barrier 48 47 49)
(code_label 49 48 50 8 4 (nil) [1 uses])
(note 50 49 51 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 8 (set (reg/f:DI 85 [ D.2410 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [3 MEM[(struct  *)&ap].overflow_arg_area+0 S8 A64])) "open-safer.c":40:12 -1
     (nil))
(insn 52 51 53 8 (parallel [
            (set (reg/f:DI 92 [ D.2411 ])
                (plus:DI (reg/f:DI 85 [ D.2410 ])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) "open-safer.c":40:12 -1
     (nil))
(insn 53 52 54 8 (set (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [3 MEM[(struct  *)&ap].overflow_arg_area+0 S8 A64])
        (reg/f:DI 92 [ D.2411 ])) "open-safer.c":40:12 -1
     (nil))
(code_label 54 53 55 9 5 (nil) [1 uses])
(note 55 54 56 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 9 (set (reg:SI 96)
        (mem:SI (reg/f:DI 85 [ D.2410 ]) [0 MEM[(mode_t * {ref-all})addr.0_18]+0 S4 A32])) "open-safer.c":40:12 -1
     (nil))
(insn 57 56 58 9 (set (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [2 mode+0 S4 A32])
        (reg:SI 96)) "open-safer.c":40:12 -1
     (nil))
(code_label 58 57 59 10 3 (nil) [1 uses])
(note 59 58 60 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 10 (set (reg:SI 97)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -36 [0xffffffffffffffdc])) [2 mode+0 S4 A32])) "open-safer.c":45:10 -1
     (nil))
(insn 61 60 62 10 (set (reg:SI 98)
        (mem/c:SI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -60 [0xffffffffffffffc4])) [2 flags+0 S4 A32])) "open-safer.c":45:10 -1
     (nil))
(insn 62 61 63 10 (set (reg:DI 99)
        (mem/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                (const_int -56 [0xffffffffffffffc8])) [4 file+0 S8 A64])) "open-safer.c":45:10 -1
     (nil))
(insn 63 62 64 10 (set (reg:SI 1 dx)
        (reg:SI 97)) "open-safer.c":45:10 -1
     (nil))
(insn 64 63 65 10 (set (reg:SI 4 si)
        (reg:SI 98)) "open-safer.c":45:10 -1
     (nil))
(insn 65 64 66 10 (set (reg:DI 5 di)
        (reg:DI 99)) "open-safer.c":45:10 -1
     (nil))
(insn 66 65 67 10 (set (reg:QI 0 ax)
        (const_int 0 [0])) "open-safer.c":45:10 -1
     (nil))
(call_insn 67 66 68 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("open") [flags 0x41]  <function_decl 0x76396a7a9f00 open>) [0 open S1 A8])
            (const_int 0 [0]))) "open-safer.c":45:10 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 68 67 69 10 (set (reg:SI 83 [ _2 ])
        (reg:SI 0 ax)) "open-safer.c":45:10 -1
     (nil))
(insn 69 68 70 10 (set (reg:SI 5 di)
        (reg:SI 83 [ _2 ])) "open-safer.c":45:10 -1
     (nil))
(call_insn 70 69 71 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fd_safer") [flags 0x41]  <function_decl 0x76396a7bd200 fd_safer>) [0 fd_safer S1 A8])
            (const_int 0 [0]))) "open-safer.c":45:10 -1
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 71 70 74 10 (set (reg:SI 84 [ _16 ])
        (reg:SI 0 ax)) "open-safer.c":45:10 -1
     (nil))
(insn 74 71 78 10 (set (reg:SI 93 [ <retval> ])
        (reg:SI 84 [ _16 ])) "open-safer.c":45:10 -1
     (nil))
(insn 78 74 79 10 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 77 virtual-stack-vars)
                                (const_int -8 [0xfffffffffffffff8])) [3 D.2412+0 S8 A64])
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_TEST))
            (clobber (scratch:DI))
        ]) "open-safer.c":46:1 -1
     (nil))
(jump_insn 79 78 88 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) "open-safer.c":46:1 -1
     (nil)
 -> 82)
(note 88 79 80 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(call_insn 80 88 81 13 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x76396a7bdf00 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "open-safer.c":46:1 -1
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
(barrier 81 80 82)
(code_label 82 81 89 14 7 (nil) [1 uses])
(note 89 82 83 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 83 89 84 14 (set (reg/i:SI 0 ax)
        (reg:SI 93 [ <retval> ])) "open-safer.c":46:1 -1
     (nil))
(insn 84 83 0 14 (use (reg/i:SI 0 ax)) "open-safer.c":46:1 -1
     (nil))
